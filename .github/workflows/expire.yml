name: 'expire'

on:
  workflow_call:
    inputs:
      repo:
        description: 'The owner and repository name. For example, Codertocat/Hello-World'
        type: 'string'
        required: true
      expiry_hours:
        description: 'The number of hours to keep an AOD PR open since last updated.'
        type: 'number'
        default: 24
        required: false

permissions:
  pull-requests: 'write'

jobs:
  expire:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
        with:
          result-encoding: 'string'
          retries: 3
          script: |-
            const parts = String('${{ inputs.repo }}').split('/')
            if (parts.length != 2) {
              core.setFailed(`Input repo "${{ inputs.repo }}" is not in the right format "<owner>/<name>"`);
            }
            const repoOwner = parts[0]
            const repoName = parts[1]
            const cutoffMs = ${{ inputs.expiry_hours }} * 60 * 60 * 1000
            const now = new Date();
            const pulls = await github.rest.pulls.list({
              owner: repoOwner,
              repo: repoName,
              state: 'open',
              per_page: 100,
            });

            if (!pulls) {
              return;
            }

            core.info(`Found ${pulls.data.length} pulls`);

            pulls.data.forEach(async (pull) => {
              const files = await github.rest.pulls.listFiles({
                owner: repoOwner,
                repo: repoName,
                pull_number: pull['number'],
              })

              // Check if the PR is an AOD request by checking the AOD file existence.
              if (files.data.find(f => (f.filename === 'iam.yaml' || f.filename === 'cli.yaml'))) {
                // Check if the PR is within the cutoff threshold
                const updatedAt = new Date(Date.parse(pull['updated_at']));

                if (now.getTime() - updatedAt.getTime() < cutoffMs) {
                  core.info(`Skipping #${pull['number']} (${pull['title']}) - within threshold`);
                  return;
                }

                core.info(`Closing #${pull['number']} (${pull['title']})`);

                await github.rest.pulls.update({
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: pull['number'],
                  state: 'closed',
                });
              } else {
                core.info(`Skipping #${pull['number']} (${pull['title']}) - not an AOD request`);
              }
            });
