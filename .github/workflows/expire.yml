# Copyright 2023 The Authors (see AUTHORS file)

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#      http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Reusable workflow that closes expired open pull requests.
name: 'expire'

on:
  workflow_call:
    inputs:
      repo:
        description: 'The owner and repository name. For example, Codertocat/Hello-World'
        type: 'string'
        required: true
      expiry_hours:
        description: 'The number of hours to keep an AOD PR open since last updated.'
        type: 'number'
        default: 24
        required: false
    outputs:
      pulls:
        description: 'Information of the pull requests that are expired and closed.'
        value: '${{ jobs.expire.outputs.pulls }}'

permissions:
  pull-requests: 'write'
  contents: 'read'

jobs:
  expire:
    runs-on: 'ubuntu-latest'
    outputs:
      pulls: '${{ steps.expire_pr.outputs.result }}'
    steps:
      - id: 'expire_pr'
        uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
        with:
          # Token required for authentication when getting a branch, see
          # JavaScript example in ref: https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#get-a-reference
          github-token: '${{ github.token }}'
          retries: 3
          script: |-
            const parts = String('${{ inputs.repo }}').split('/')
            if (parts.length != 2) {
              core.setFailed(`Input repo "${{ inputs.repo }}" is not in the right format "<owner>/<name>"`);
            }
            const repoOwner = parts[0]
            const repoName = parts[1]
            const cutoffMs = ${{ inputs.expiry_hours }} * 60 * 60 * 1000
            const now = new Date();
            const pulls = await github.rest.pulls.list({
              owner: repoOwner,
              repo: repoName,
              state: 'open',
              per_page: 100,
            });

            if (!pulls) {
              return;
            }

            core.info(`Found ${pulls.data.length} pulls`);

            const expiredPulls = new Array();

            await Promise.all(pulls.data.map(async (pull) => {
              const files = await github.rest.pulls.listFiles({
                owner: repoOwner,
                repo: repoName,
                pull_number: pull['number'],
              })

              // Check if the PR is an AOD request by checking the AOD file existence.
              if (files.data.find(f => (f.filename === 'iam.yaml' || f.filename === 'tool.yaml'))) {
                // Check if the PR is within the cutoff threshold
                // Get last committed at time from ref branch
                const ref = pull['head']['ref']
                const branch = await github.rest.repos.getBranch({
                  owner: repoOwner,
                  repo: repoName,
                  branch: ref,
                })
                // Branch returns the latest commit info. See schema:
                // https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch
                const lastCommittedAt = branch['data']['commit']['commit']['committer']['date']
                core.info(`#${pull['number']} lastCommittedAt (${lastCommittedAt})`);

                if (now.getTime() - new Date(Date.parse(lastCommittedAt)).getTime() < cutoffMs) {
                  core.info(`Skipping #${pull['number']} (${pull['title']}) - within threshold`);
                  return;
                }

                core.info(`Closing #${pull['number']} (${pull['title']})`);

                await github.rest.pulls.update({
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: pull['number'],
                  state: 'closed',
                });

                // Comment on closed PRs.
                await github.rest.issues.createComment({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: pull['number'],
                  body: `**\`Access on Demand\`** - request closed and branch deleted due to inactivity (no new commit) for at least ${{ inputs.expiry_hours }} hours`,
                });

                expiredPulls.push({pullNumber: pull['number'], pullBranch: pull['head']['ref']})
              } else {
                core.info(`Skipping #${pull['number']} (${pull['title']}) - not an AOD request`);
              }
            }));

            return expiredPulls;
