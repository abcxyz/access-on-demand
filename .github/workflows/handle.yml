# Copyright 2023 The Authors (see AUTHORS file)

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#      http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'aod-handle'
# TODO(#30): Support pull_request labeled triggering event. Current workflow
# requires the triggering event must be pull_request_review as it relies on this
# event to get the approval submit time as IAM permission expiration start time.
on:
  workflow_call:
    inputs:
      workload_identity_provider:
        description: 'The full identifier of the Workload Identity Provider, including the project number, pool name, and provider name.'
        type: 'string'
        required: true
      service_account:
        description: 'Email address or unique identifier of the Google Cloud service account for which to generate credentials.'
        type: 'string'
        required: true
      aod_cli_version:
        description: 'The version of AOD CLI.'
        type: 'string'
        default: 'latest'
        required: false
      go_version:
        description: 'The version of Golang.'
        type: 'string'
        default: '1.20'
        required: false

env:
  DEFAULT_DURATION: '2h'
  IAM_ERROR_FILENAME: '/tmp/iam_error.txt'
  AOD_NOTE: >
    ‚õîÔ∏è <strong>This is an AOD request, and merging is NOT allowed.</strong>
    The request will be automatically applied once the code owners approve it.
    Please close the PR once you are finished. For more instructions,
    please see [here](https://github.com/abcxyz/aod-template/blob/main/README.md).

jobs:
  review_status:
    runs-on: 'ubuntu-latest'
    outputs:
      REVIEW_DECISION: '${{ steps.get_review_decision.outputs.REVIEW_DECISION }}'
    steps:
      - id: 'get_review_decision'
        env:
          # Set the GH_TOKEN environment variable to use GitHub CLI in a GitHub Actions workflow.
          # See ref: https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows
          GH_TOKEN: '${{ github.token }}'
        run: |
          repo=${{ github.repository }}
          reviewDecision="$(gh api graphql -F owner=${{ github.repository_owner }} -F name=${repo##*/} -F pr_number=${{ github.event.pull_request.number }} -f query='
            query($name: String!, $owner: String!, $pr_number: Int!) {
              repository(owner: $owner, name: $name) {
                pullRequest(number: $pr_number) {
                  reviewDecision
                }
              }
            }
          ' --jq '.data.repository.pullRequest.reviewDecision')"

          echo REVIEW_DECISION=$reviewDecision >> $GITHUB_OUTPUT

  handle:
    # Only handle the request when the PR is approved by qualified approvers.
    needs: 'review_status'
    if: '${{ needs.review_status.outputs.REVIEW_DECISION == ''APPROVED'' }}'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    name: 'Handle Request'
    steps:
      - name: 'Checkout Triggering Branch'
        uses: 'actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab' # ratchet:actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.head.ref }}'
      # Steps will be skipped starting from here when iam.yaml file does not
      # exist in the case of a pull_request_review event.
      - name: 'Setup Go'
        if: '${{ hashFiles(''iam.yaml'', ''tool.yaml'') != '''' }}'
        uses: 'actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568' # ratchet:actions/setup-go@v3
        with:
          go-version: '${{ inputs.go_version }}'
      - name: 'Authenticate to Google Cloud'
        if: '${{ hashFiles(''iam.yaml'', ''tool.yaml'') != '''' }}'
        uses: 'google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ inputs.workload_identity_provider }}'
          service_account: '${{ inputs.service_account }}'
          token_format: 'access_token'
      - name: 'Install AOD CLI'
        if: '${{ hashFiles(''iam.yaml'', ''tool.yaml'') != '''' }}'
        run: 'go install github.com/abcxyz/access-on-demand/cmd/aod@${{ inputs.aod_cli_version }}'
      # Duration labels need to be prefixed with "duration-", an example is "duration-2h".
      - name: 'Get Duration From Label'
        if: '${{ hashFiles(''iam.yaml'') != '''' }}'
        run: |
          names='${{ toJson(github.event.pull_request.labels.*.name) }}'
          for name in $(echo "$names" | jq -r '.[]'); do
            if [[ $name == duration-* ]]; then
              IFS='-' read -r part1 part2 <<< "$name"
              echo "LABELED_DURATION=$part2" >> $GITHUB_ENV
              break
            fi
          done
      # Request will not be handled when iam.yaml file is not found.
      - name: 'Handle IAM Request'
        if: '${{ hashFiles(''iam.yaml'') != '''' }}'
        id: 'handle_iam'
        env:
          DURATION: '${{ env.LABELED_DURATION || env.DEFAULT_DURATION }}'
          IAM_FILE_PATH: '${{ github.workspace }}/iam.yaml'
          START_TIME: '${{ github.event.review.submitted_at }}'
        run: |
          touch ${IAM_ERROR_FILENAME}
          aod iam handle -path ${FILE_PATH} -duration ${DURATION} -start-time ${START_TIME} 2> ${IAM_ERROR_FILENAME}
      # Request will not be handled when tool.yaml file does not exist in the
      # case of a pull_request_review event, instead it prints out a notice.
      - name: 'Handle CLI Request'
        env:
          CLI_FILE_PATH: '${{ github.workspace }}/tool.yaml'
        run: |
          if [ -f "tool.yaml" ]; then
            aod tool do -path ${CLI_FILE_PATH}
          else
            echo "::notice title=CLI Request Handle::Skip because tool.yaml is not found"
          fi

      - name: 'IAM Request Comment'
        if: '${{ always()}}'
        uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
        with:
          github-token: '${{ github.token }}'
          retries: '3'
          script: |+
            var body, req;
            const fs = require("fs");
            const outcome = '${{ steps.handle_iam.outcome }}';
            switch (outcome) {
              case 'success':
                req = fs.readFileSync(
                  `iam.yaml`,
                  { encoding: "utf8" }
                );

              body = `**\`Access on Demand\`** - üü© **\`IAM\`** request succeeded.

            <details>
            <summary>Details</summary>
            Added below IAM permissions, and they will be expired in ${{ env.LABELED_DURATION || env.DEFAULT_DURATION }}.

            \`\`\`
            ${req}
            \`\`\`
            </details>

            ${{ env.AOD_NOTE }}`;
                break;
              case 'failure':
                req = fs.readFileSync(
                  `iam.yaml`,
                  { encoding: "utf8" }
                );
                const error = fs.readFileSync(
                  `${{ env.IAM_ERROR_FILENAME }}`,
                  { encoding: "utf8" }
                );
                body = `**\`Access on Demand\`** - üü• **\`IAM\`** request failed.

            <details>
            <summary>Details</summary>
            Failed to added below IAM permissions.

            \`\`\`
            ${req}
            \`\`\`

            Error:
            \`\`\`
            ${error}
            \`\`\`
            </details>

            ${{ env.AOD_NOTE }}`;
                break;
              // step cancelled.
              default:
                body = `**\`Access on Demand\`** - üü® **\`IAM\`** request not found.`;
                break;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: body,
            });
